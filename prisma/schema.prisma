// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Picture {
  id    String     @default(uuid()) @id
  picture Bytes?
  name String? @db.VarChar(500)
  type    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  newsItem NewsItem[]
  articleItem ArticleItem[]
  portfolio Portfolio[]
  news News[]
  article Article[]
  @@map("pictures")
}

model News {
  id    String     @default(uuid()) @id
  number      Int        @default(autoincrement())
  title     String? @db.VarChar(500)
  subtitle     String? @db.VarChar(500)
  picture     Picture?   @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId   String?    @default(uuid())
  time String?
  video String?
  status    ContentSatus?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  newsItem NewsItem[]
  @@map("news")
}

model Article {
  id    String     @default(uuid()) @id
  number      Int        @default(autoincrement())
  title     String? @db.VarChar(500)
  subtitle     String? @db.VarChar(500)
  picture     Picture?   @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId   String?    @default(uuid())
  time String?
  video String?
  status    ContentSatus?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleItem ArticleItem[]
  @@map("articles")
}

model NewsItem {
  id          String     @default(uuid()) @id
  text        String?    @db.VarChar(3000)
  picture     Picture?   @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId   String?    @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  news     News?   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId String?    @default(uuid())
  list        Json?
  @@map("news_items")
}

model ArticleItem {
  id          String     @default(uuid()) @id
  text        String?    @db.VarChar(3000)
  picture     Picture?   @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId   String?    @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  article     Article?   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?    @default(uuid())
  list        Json?
  @@map("article_items")
}

model Portfolio {
  id    String     @default(uuid()) @id
  number      Int        @default(autoincrement())
  title     String? @db.VarChar(500)
  description   String? @db.VarChar(3000)
  categoryName String?
  category    PortfolioCategory?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String? @default(uuid())
  picture    Picture?    @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId  String? @default(uuid())
  status    ContentSatus?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("portfolios")
}

model PortfolioCategory {
  id    String     @default(uuid()) @id
  title     String? @db.VarChar(500)
  description   String? @db.VarChar(3000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  portfolio Portfolio[]
  @@map("portfolio_categories")
}

enum ContentSatus {
  PUBLISHED
  DRAFT
  ARCHIVE
}
